---
- name: Create new Users | Reset the password (non-current-user)
  ansible.builtin.raw: |
    sysadminctl -addUser {{ item.username }} -password {{ item.password | default(random_generated_password if not save_secrets_to_vault else pregenerated_password) }} -admin -shell /bin/zsh
    sysadminctl -resetPasswordFor {{ item.username }} -newPassword {{ item.password | default(random_generated_password if not save_secrets_to_vault else pregenerated_password) }} -adminUser {{ ansible_user }} -adminPassword {{ ansible_password }}
  changed_when: true
  loop: "{{ admin_accounts }}"
  when:
    - item.username != ansible_user
##
# The current deployer user credentials must change separately. Because they are needed to be passed in via commandline in the previous task.
#
- name: Including first run user confiuration tasks block...
  when:
    - ansible_deployer_password != ansible_password
    - ansible_password == template_password
    - ansible_user == template_username
  block:
    # Decision tree:
    #  1) Find the template_user from admin_accounts
    #  2) if .password is set for that user in admin_accounts, use that as password
    #  3) else if save_secrets_to_vault use pregenerated_password
    #  4) else random_generated_password

    # TODO: Loop-of-1 is here since there is a dependency of variable "item" being used inside pregenerated_password. When this is not true anymore, remove the loop
    - name: Deciding password for {{ item.username }}
      ansible.builtin.set_fact:
        template_user_final_password: "{{ item.password | default(random_generated_password if not save_secrets_to_vault else pregenerated_password) }}"
      loop:
        - "{{ admin_accounts | selectattr('username', 'equalto', template_username) | first }}"

    - name: Setting password for {{ template_username }} as {{ ansible_user }}
      ansible.builtin.raw: |
        sysadminctl -resetPasswordFor {{ template_username }} -newPassword {{ template_user_final_password }} -adminUser {{ ansible_user }} -adminPassword {{ ansible_password }}
      changed_when: true

- name: Enabling password requirement for sudo...
  ansible.builtin.raw: |
    sed -i "" "s/^\%admin.*/\%admin\t\tALL = \(ALL\:ALL\) ALL/g" /etc/sudoers
  changed_when: true
  when: sudo_requires_password

- name: Disabling password requirement for sudo
  ansible.builtin.raw: |
    sed -i "" "s/^\%admin.*/\%admin\t\tALL = \(ALL\) NOPASSWD\: ALL/g" /etc/sudoers
  changed_when: true
  when: not sudo_requires_password

- name: Set the keys
  ansible.builtin.raw: |
    line="$( echo {{ item.ssh_key }} )"
    if [ "root" = "{{ item.username }}" ];
    then
        echo "Adding key to root user"
        file=/var/root/.ssh/authorized_keys
        mkdir -p /var/root/.ssh/
        touch $file
    else
        file=/Users/{{ item.username }}/.ssh/authorized_keys
        mkdir -p /Users/{{ item.username }}/.ssh/
        touch $file
    fi
    grep -qxF "$line" $file || echo "$line" >> $file
  changed_when: true
  loop: "{{ admin_accounts }}"
  when: item.ssh_key is defined
